
- name: Check if lock_file_1 exists
  stat: 
    path: "/tmp/{{ matrix_domain }}_lock_1"
  register: lock_file_1

- name: Launch stop job template on AWX
  awx.awx.tower_job_launch:
    job_template: "{{ matrix_domain }} - 0 - Stop all Services"
    tower_host: "https://{{ awx_host }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes
  when: lock_file_1.stat.exists == false
  register: stop_job

- name: Wait for stop job max 3 minutes
  awx.awx.tower_job_wait:
    job_id: "{{ stop_job.id }}"
    timeout: 180
    tower_host: "https://{{ awx_host }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes
  when: lock_file_1.stat.exists == false

- name: Launch backup job template on AWX
  awx.awx.tower_job_launch:
    job_template: "{{ matrix_domain }} - 0 - Backup Server"
    tower_host: "https://{{ awx_host }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes
  when: ( lock_file_1.stat.exists == false ) and ( borg_backup_matrix_input | trim | length > 0 ) and ( borg_backup_database_input | trim | length > 0 )
  register: backup_job

- name: Wait for backup job max 2 hours
  awx.awx.tower_job_wait:
    job_id: "{{ backup_job.id }}"
    timeout: 7200
    tower_host: "https://{{ awx_host }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes
  when: ( lock_file_1.stat.exists == false ) and ( borg_backup_matrix_input | trim | length > 0 ) and ( borg_backup_database_input | trim | length > 0 )

- name: Create lock_file_1
  file:
    path: /tmp/{{ matrix_domain }}_lock_1
    state: touch
  when: lock_file_1.stat.exists == false
