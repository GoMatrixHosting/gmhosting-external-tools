
- name: Check if lock_file_3 exists
  stat: 
    path: "/tmp/{{ matrix_domain }}_lock_3"
  register: lock_file_3


#5) Extract variables needed to re-create subscription:

#On controller, extract matrix.tar.gz, examine /matrix/awx/organisation.yml and /matrix/awx/matrix_awx.yml and /matrix/awx/server_vars.yml and /matrix/awx/extra_vars.json, copy:

#- client_email: "bobfett@protonmail.com"		[/matrix/awx/organisation.yml]
#- client_first_name: "Bob"				[/matrix/awx/organisation.yml]
#- client_last_name: "Fett"				[/matrix/awx/organisation.yml]
#- matrix_domain: fishbole.xyz				[/matrix/awx/matrix_vars.yml]
#- matrix_server_fqn_element: element.fishbole.xyz	[/matrix/awx/matrix_vars.yml]
#- matrix_nginx_proxy_base_domain_serving_enabled: true	[/matrix/awx/matrix_vars.yml]
#- subscription_type: digitalocean			[/matrix/awx/server_vars.yml]
#- plan_title: Medium DigitalOcean Server		[/matrix/awx/extra_vars.json]
#- subscription_id: I-CREUS74S6969			[/matrix/awx/extra_vars.json]
#- member_id: 31						[/matrix/awx/extra_vars.json]

#As well as:

#- do_droplet_region: tor1				[/matrix/awx/server_vars.yml]
#OR
#- server_ipv4: 134.209.44.206				[/matrix/awx/server_vars.yml]
#- server_ipv6: 2604:a880:800:c1::181:7001		[/matrix/awx/server_vars.yml]


#6) Observe 'subscription_id' in server_vars.yml, if it's a MemberPress subscription (Starts with I-) launch '00 - Ansible Create MP Subscription' with the above variables, otherwise if it's a manual subscription (Starts with T-) launch '00 - Ansible Create Manual Subscription'.

- debug:
    msg: "{{ subscription_id }}"
  when: lock_file_3.stat.exists == false

- debug:
    msg: "{{ member_id }}"
  when: lock_file_3.stat.exists == false

- debug:
    msg: "T- found in subscription_id!"
  when: ( subscription_id is search("^T-") ) and ( lock_file_3.stat.exists == false )
  
- debug:
    msg: "sub_ found in subscription_id!"
  when: ( subscription_id is search("^sub_") ) and ( lock_file_3.stat.exists == false )

# Fetch AWX master token



# Manual needs:
#
# client_first_name		Billy
# client_last_name		Bob
# client_email		billybob@protonmail.com
# client_password		hunter2
# member_id			billy.bob
# plan_title		Micro DigitalOcean Server

# MP needs:
# 
# client_first_name		Tom
# client_last_name		Cruise
# client_email		tomcruise@protonmail.com
# member_id			20
# subscription_id		I-VCRY4H9EKT9A
# plan_title		Small DigitalOcean Server



# derive new_subscription_type from new_plan_title

## write :
# new_plan_title
# new_subscription_type (derived from plan_title?)
#AND
# new_do_droplet_region_long
#OR
# new_server_ipv4
# new_server_ipv6
#
## to it!

- name:
  set_fact:
    create_subscription_template: '00 - Create MP Subscription'
  when: ( new_account_type == "manual" ) and ( lock_file_3.stat.exists == false )

- name:
  set_fact:
    create_subscription_template: '00 - Create Manual Subscription'
  when: ( new_account_type == "memberpress" ) and ( lock_file_3.stat.exists == false )


# 2) it's stored in the inventory file ./inventory/{{ matrix_domain }}.yml for the next run
# 3) used to check if subscription exists already

- name: Template new '{{ matrix_domain }}_create_subscription_template.json' extra variables
  template:
    src: './templates/manual_create_subscription_template.json.j2'
    dest: '/tmp/{{ matrix_domain }}_create_subscription_template.json'
  when: ( new_account_type == "manual" ) and ( lock_file_3.stat.exists == false )

- name: Template new '{{ matrix_domain }}_create_subscription_template.json' extra variables
  template:
    src: './templates/mp_create_subscription_template.json.j2'
    dest: '/tmp/{{ matrix_domain }}_create_subscription_template.json'
  when: ( new_account_type == "memberpress" ) and ( lock_file_3.stat.exists == false )

- name: Launch subscription creation job template on AWX
  awx.awx.tower_job_launch:
    job_template: '{{ create_subscription_template }}'
    extra_vars: "{{ lookup('file', '/tmp/{{ matrix_domain }}_create_subscription_template.json') }}"
    tower_host: "https://{{ awx_host }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes
  when: lock_file_3.stat.exists == false
  register: create_job

- name: Wait for create subscription job max 300s
  awx.awx.tower_job_wait:
    job_id: "{{ create_job.id }}"
    timeout: 300
    tower_host: "https://{{ awx_host }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes
  when: lock_file_3.stat.exists == false

- name: Create lock_file_3
  file:
    path: /tmp/{{ matrix_domain }}_lock_3
    state: touch
  when: lock_file_3.stat.exists == false
