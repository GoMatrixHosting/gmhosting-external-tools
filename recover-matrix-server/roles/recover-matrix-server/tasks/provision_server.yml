
- name: Check if lock_file_4 exists
  stat: 
    path: "/tmp/{{ matrix_domain }}_lock_4"
  register: lock_file_4

#7) Ensure the previous backup has been moved:

#backup_user@backup_server:~$ mv /mnt/backup-dir/Clients/fishbole.xyz/ /mnt/backup-dir/Clients/fishbole.xyz-old/

# fetch provision script

- name: Set awx_element_subdomain variable for provision
  set_fact:
    awx_element_subdomain: '{{ matrix_server_fqn_element.split(".")[0] | lower }}'
  when: matrix_nginx_proxy_base_domain_serving_enabled | bool

- name: Set awx_element_subdomain variable for provision
  set_fact:
    awx_element_subdomain: '{{ matrix_server_fqn_element.split(".")[0] | lower }}'
  when: not matrix_nginx_proxy_base_domain_serving_enabled | bool

- name: Check that the subscriptions backup directory exists
  delegate_to: "{{ backup_server }}"
  stat:
    path: '{{ backup_directory }}/Clients/{{ matrix_domain }}'
  register: subscription_backup_directory
  when: lock_file_4.stat.exists == false

- name: Collect current datetime
  set_fact:
    awx_datetime: "{{ lookup('pipe', 'date +%Y-%m-%d_%H:%M') }}"
  when: lock_file_4.stat.exists == false

- name: Move the subscriptions backup directory if unmoved
  delegate_to: "{{ backup_server }}"
  command: mv "{{ backup_directory }}/Clients/{{ matrix_domain }}" "{{ backup_directory }}/Clients/{{ matrix_domain }}_{{ awx_datetime }}"
  when: ( subscription_backup_directory.stat.exists is defined ) and ( subscription_backup_directory.stat.exists ) and ( lock_file_4.stat.exists == false )


#8) Remove the 'imposter-check' tag from 'Provision a New Server', then run the template with these survey answers:

#SET BASE DOMAIN - matrix_domain

#BASE DOMAIN USED - If matrix_nginx_proxy_base_domain_serving_enabled: true, then select 'false', otherwise select 'true'. 

#SET ELEMENT SUBDOMAIN - Copy only the subdomain from matrix_server_fqn_element, for example only 'element' out of element.gnuperth.org.

#SELECT REGION - Figure it out from the do_droplet_region. (Or a different one if you're trying to migrate it)

#OR

#SERVER IPV4/SERVER IPV6 - Enter the IPs for the new on-premises server. 

- name: Include 'new_subscription_id' variables from '{{ matrix_domain }}.yml'
  include_vars:
    file: '/tmp/{{ matrix_domain }}.yml'
  when: matrix_domain_file.stat.exists

- name: Template new 'provision_server_extra-vars.json' variable file
  template:
    src: './templates/digitalocean_provision_server_extra-vars.json.j2'
    dest: '/tmp/{{ matrix_domain }}_provision_server_extra-vars.json'
  when: ( new_subscription_type == "digitalocean" ) and ( lock_file_4.stat.exists == false )

- name: Template new 'provision_server_extra-vars.json' variable file
  template:
    src: './templates/on_premises_provision_server_extra-vars.json.j2'
    dest: '/tmp/{{ matrix_domain }}_provision_server_extra-vars.json'
  when: ( new_subscription_type == "on_premises" ) and ( lock_file_4.stat.exists == false )

- name: Add server_ipv4 line to provision_server_extra-vars.json
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/tmp/{{ matrix_domain }}_provision_server_extra-vars.json'
    insertafter: '^{'
    line: '  "{{ item.key }}": "{{ item.value }}",'
    mode: '0600'
    state: present
  with_dict:
    'server_ipv4': '{{ new_server_ipv4 }}'
  when: ( new_server_ipv4 is defined ) and ( new_server_ipv4 | trim | length > 0 ) and ( new_subscription_type == "on_premises" ) and ( lock_file_4.stat.exists == false )

- name: Add server_ipv6 line to provision_server_extra-vars.json
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/tmp/{{ matrix_domain }}_provision_server_extra-vars.json'
    insertafter: '^{'
    line: '  "{{ item.key }}": "{{ item.value }}",'
    mode: '0600'
    state: present
  with_dict:
    'server_ipv6': '{{ new_server_ipv6 }}'
  when: ( new_server_ipv6 is defined ) and ( new_server_ipv6 | trim | length > 0 ) and ( new_subscription_type == "on_premises" ) and ( lock_file_4.stat.exists == false )

- name: Remove imposter-check tag from new 'Provision a New Server' job template
  awx.awx.tower_job_template:
    name: "0 - {{ new_subscription_id }} - Provision a New Server"
    description: "Creates digitalocean droplet and space, performs initial setup, adds relevant playbooks to users account."
    extra_vars: "{{ lookup('file', '/tmp/{{ matrix_domain }}_provision_server_extra-vars.json') }}"
    job_type: run
    inventory: "{{ member_id }}"
    project: "{{ member_id }} - Ansible Provision Server"
    playbook: setup.yml
    credential: "{{ member_id }} - AWX SSH Key"
    survey_enabled: false
    state: present
    verbosity: 1
    job_tags: setup-firewall, setup-mailgun, setup-export, setup-backup
    skip_tags: digitalocean-space, imposter-check
    tower_host: "https://{{ awx_host }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes
  when: ( new_subscription_type == "digitalocean" ) and ( lock_file_4.stat.exists == false )

- name: Remove imposter-check tag from new 'Provision a New Server' job template
  awx.awx.tower_job_template:
    name: "0 - {{ new_subscription_id }} - Provision a New Server"
    description: "Connects existing server, performs initial setup, adds relevant playbooks to users account."
    extra_vars: "{{ lookup('file', '/tmp/{{ matrix_domain }}_provision_server_extra-vars.json') }}"
    job_type: run
    inventory: "{{ member_id }}"
    project: "{{ member_id }} - Ansible Provision Server"
    playbook: setup.yml
    credential: "{{ member_id }} - AWX SSH Key"
    survey_enabled: false
    state: present
    verbosity: 1
    job_tags: setup-firewall, setup-mailgun, setup-export, setup-backup
    skip_tags: digitalocean-space, digitalocean-droplet
    tower_host: "https://{{ awx_host }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes
  when: ( new_subscription_type == "on_premises" ) and ( lock_file_4.stat.exists == false )

- name: Disallow team from executing the new 'Provision a New Server' job_template
  awx.awx.tower_role:
    team: "{{ member_id }}"
    job_template: "0 - {{ new_subscription_id }} - Provision a New Server"
    role: execute
    state: absent
    tower_host: "https://{{ awx_host }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes
  when: lock_file_4.stat.exists == false 
  ignore_errors: yes

- name: Allow team to view the new 'Provision a New Server' job_template
  awx.awx.tower_role:
    team: "{{ member_id }}"
    job_template: "0 - {{ new_subscription_id }} - Provision a New Server"
    role: read
    state: present
    tower_host: "https://{{ awx_host }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes
  when: lock_file_4.stat.exists == false
  ignore_errors: yes

- name: Launch provision job template on AWX
  awx.awx.tower_job_launch:
    job_template: "0 - {{ new_subscription_id }} - Provision a New Server"
    tower_host: "https://{{ awx_host }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes
  when: lock_file_4.stat.exists == false
  register: provision_job_1

- name: Wait for provision job max 900s (15m)
  awx.awx.tower_job_wait:
    job_id: "{{ provision_job_1.id }}"
    timeout: 900
    tower_host: "https://{{ awx_host }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes
  when: lock_file_4.stat.exists == false

- name: Fetch new server_vars.yml file to collect the IP address generated during provision. 
  delegate_to: "{{ awx_server }}"
  fetch:
    src: "/var/lib/awx/projects/clients/{{ member_id }}/{{ new_subscription_id }}/server_vars.yml"
    dest: "/tmp/{{ matrix_domain }}_new_server_vars.yml"
    flat: yes
  when: ( new_subscription_type == "digitalocean" ) and ( lock_file_4.stat.exists == false )

- name: Change IP variable names in fetched file to include 'new_do_'
  command: |
    sed -i 's/server_/new_do_server_/' /tmp/{{ matrix_domain }}_new_server_vars.yml
  when: ( new_subscription_type == "digitalocean" ) and ( lock_file_4.stat.exists == false )

- name: Include new_server_vars.yml variable file
  include_vars: "/tmp/{{ matrix_domain }}_new_server_vars.yml"
  when: ( new_subscription_type == "digitalocean" )

- name: Set server_ip_final if both IPv4 and IPv6 are defined. [digitalocean]
  delegate_to: 127.0.0.1
  set_fact:
    server_ip_final: '{{ new_do_server_ipv4 }}'
  when: ( new_do_server_ipv4 | length > 0 ) and ( new_do_server_ipv6 | length > 0 ) and ( new_subscription_type == "digitalocean" )

- name: Set server_ip_final if only IPv4 is defined. [digitalocean]
  delegate_to: 127.0.0.1
  set_fact:
    server_ip_final: '{{ new_do_server_ipv4 }}'
  when: ( new_do_server_ipv4 | length > 0 ) and ( new_do_server_ipv6 | length == 0 ) and ( new_subscription_type == "digitalocean" )

- name: Set server_ip_final if only IPv6 is defined. [digitalocean]
  delegate_to: 127.0.0.1
  set_fact:
    server_ip_final: '{{ new_do_server_ipv6 }}'
  when: ( new_do_server_ipv4 | length == 0 ) and ( new_do_server_ipv6 | length > 0 ) and ( new_subscription_type == "digitalocean" )

- name: Set server_ip_final if both IPv4 and IPv6 are defined. [on-premises]
  delegate_to: 127.0.0.1
  set_fact:
    server_ip_final: '{{ new_server_ipv4 }}'
  when: ( new_server_ipv4 | length > 0 ) and ( new_server_ipv6 | length > 0 ) and ( new_subscription_type == "on_premises" )

- name: Set server_ip_final if only IPv4 is defined. [on-premises]
  delegate_to: 127.0.0.1
  set_fact:
    server_ip_final: '{{ new_server_ipv4 }}'
  when: ( new_server_ipv4 | length > 0 ) and ( new_server_ipv6 | length == 0 ) and ( new_subscription_type == "on_premises" )

- name: Set server_ip_final if only IPv6 is defined. [on-premises]
  delegate_to: 127.0.0.1
  set_fact:
    server_ip_final: '{{ new_server_ipv6 }}'
  when: ( new_server_ipv4 | length == 0 ) and ( new_server_ipv6 | length > 0 ) and ( new_subscription_type == "on_premises" )

- name: Add server_ip_final to '{{ matrix_domain }}.yml'
  lineinfile:
    path: '/tmp/{{ matrix_domain }}.yml'
    create: yes
    regexp: '^server_ip_final: .*'
    line: 'server_ip_final: {{ server_ip_final }}'
    mode: '0600'
  when: ( server_ip_final is defined ) and ( server_ip_final | length > 0 )

- name: Create lock_file_4
  file:
    path: /tmp/{{ matrix_domain }}_lock_4
    state: touch
  when: lock_file_4.stat.exists == false
